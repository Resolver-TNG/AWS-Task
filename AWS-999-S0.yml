AWSTemplateFormatVersion: '2010-09-09'
Description: A sample template

Parameters:

  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: '3'
    MaxLength: '10'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must specify Project id.

  KeyName:
    Description: OMAE no Key wo UTE
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHtoIP:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


#DB周り
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBMasterUserName:
#    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 1~16
    Default: AR15
  DBMasterPassword:
#    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: 8~41
    Default: 556556556



# 上は事前　下は実装

Resources:
  APS01:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple PHP application
      AWS::CloudFormation::Init:
        config: 
          packages:
            yum: 
              httpd: []
              php: []
              mysql: []
              php-mysql: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash -xe
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBMasterUserName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBMasterPassword
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - !GetAtt RDSBDmysql.Endpoint.Address
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.APS01.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -s ${AWS::StackId} -r APS01 --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties: 
      ImageId: 'ami-00f9d04b3b3092052'
      InstanceType: t2.micro
      #SubnetId: !Ref FOB01
      AvailabilityZone: 'ap-northeast-1c'
      KeyName: !Ref KeyName
      SecurityGroups:
      - Ref: 'APSecurityGroup'
      UserData: !Base64 
            Fn::Sub: |
                #!/bin/bash -xe
                yum -y install aws-cfn-bootstrap
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource APS01 --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource APS01 --region ${AWS::Region} 


    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

#-----------VPC--VPC--VPC--VPC-----------
# Create VPC
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'vpc' ] ]

# Create Public RouteTable
  CFPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicRouteTable' ] ]

# Create Private RouteTable
  CFPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateRouteTable' ] ]

# Create Public Subnet A
  FOB01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 'ap-northeast-1a'
      # public
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicSubnetA' ] ]
  PubSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FOB01
      RouteTableId: !Ref CFPublicRouteTable

# Create Public Subnet C
  FOB02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicSubnetC' ] ]
  PubSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FOB02
      RouteTableId: !Ref CFPublicRouteTable

# Create Private Subnet A
  CP01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateSubnetA' ] ]
  PriSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CP01
      RouteTableId: !Ref CFPrivateRouteTable



# Create Private Subnet C
  CP02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateSubnetC' ] ]
  PriSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CP02
      RouteTableId: !Ref CFPrivateRouteTable


# Create InternetGateway
  SEABEE00GW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'IGW' ] ]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CFVPC
      InternetGatewayId: !Ref SEABEE00GW
  VPCRoute:
    Type: AWS::EC2::Route
    DependsOn: SEABEE00GW
    Properties:
      RouteTableId: !Ref CFPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SEABEE00GW
#終わり-----------VPC--VPC--VPC--VPC-----------終わり


#RDSZ
  RDSBDmysql:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: 'ap-northeast-1a'
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      Engine: 'MySQL'
      DBName: !Ref DBName
      MasterUsername: !Ref DBMasterUserName
      MasterUserPassword: !Ref DBMasterPassword
    DeletionPolicy: "Snapshot"

#セキュリティG系
  APSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'AP Security Group'
      VpcId:
        Ref: CFVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: !Ref SSHtoIP
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
        #----------------------------------

#---------TEST-----RDS-------SG----------
  RDSSG008: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Enable HTTP access on the configured port'
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupName: !Ref APSecurityGroup
#    DependsOn: APSecurityGroup
#---------TEST-----RDS-------SG----------

Outputs:

  WebsiteURL:
    Description: Application URL
    Value: !Sub 'http://${APS01.PublicDnsName}'



  StackVPC:
    Description: The ID of the VPC
    Value: !Ref CFVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  FOB01SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref FOB01
    Export:
      Name: !Sub '${AWS::StackName}-FOB01SPS'

  FOB02SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref FOB02
    Export:
      Name: !Sub '${AWS::StackName}-FOB02SPS'

  CP01SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref CP01
    Export:
      Name: !Sub '${AWS::StackName}-CP01SPS'

  CP02SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref CP02
    Export:
      Name: !Sub '${AWS::StackName}-CP02SPS'
