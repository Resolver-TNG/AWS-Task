AWSTemplateFormatVersion: '2010-09-09'
Description: AWS instance VPC EC2 RDS ALB

Parameters:

  ProjectId:
    Description: Project name id.
    Type: String
    MinLength: '3'
    MaxLength: '10'
    Default: TEST000
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must specify Project id.

  KeyName:
    Description: OMAE no Key wo UTE
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHtoIP:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

#DB周り
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBMasterUserName:
#    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: 1~16
    Default: AR15
  DBMasterPassword:
#    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: 8~41
    Default: 556556556


  TableP:
    Description: The WordPress database Table P
    Type: String
    Default: wp_

  AUTHKEY:
    Description: AUTH_KEY https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  SECUREAUTHKEY:
    Description: SECURE_AUTH_KEY https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  LOGGEDINKEY:
    Description: LOGGED_IN_KEY https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  NONCEKEY:
    Description: NONCE_KEY https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  AUTHSALT:
    Description: AUTH_SALT https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  SECUREAUTHSALT:
    Description: SECURE_AUTH_SALT https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  LOGGEDINSALT:
    Description: LOGGED_IN_SALT https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464

  NONCESALT:
    Description: NONCE_SALT https://api.wordpress.org/secret-key/1.1/salt/
    Type: String
    MinLength: '64'
    MaxLength: '64'
    Default: 6464646464646464646464646464646464646464646464646464646464646464





# 上は事前　下は実装

Resources:
  APS01:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum: 
              php: []
              php-mysql: []
              httpd: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                /**
                * The base configuration for WordPress
                *
                * The wp-config.php creation script uses this file during the
                * installation. You don't have to use the web site, you can
                * copy this file to "wp-config.php" and fill in the values.
                *
                * This file contains the following configurations:
                *
                * * MySQL settings
                * * Secret keys
                * * Database table prefix
                * * ABSPATH
                *
                * @link https://codex.wordpress.org/Editing_wp-config.php
                *
                * @package WordPress
                */
                // ** MySQL settings - You can get this info from your web host ** //
                /** The name of the database for WordPress */
                define( 'DB_NAME', '${DBName}' );
                /** MySQL database username */
                define( 'DB_USER', '${DBMasterUserName}' );
                /** MySQL database password */
                define( 'DB_PASSWORD', '${DBMasterPassword}' );
                /** MySQL hostname */
                define( 'DB_HOST', '${RDSBDmysql.Endpoint.Address}' );
                /** Database Charset to use in creating database tables. */
                define( 'DB_CHARSET', 'utf8' );
                /** The Database Collate type. Don't change this if in doubt. */
                define( 'DB_COLLATE', '' );
                /**#@+
                * Authentication Unique Keys and Salts.
                *
                * Change these to different unique phrases!
                * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
                * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
                *
                * @since 2.6.0
                */
                define( 'AUTH_KEY',         '${AUTHKEY}');
                define( 'SECURE_AUTH_KEY',  '${SECUREAUTHKEY}');
                define( 'LOGGED_IN_KEY',    '${LOGGEDINKEY}');
                define( 'NONCE_KEY',        '${NONCEKEY}');
                define( 'AUTH_SALT',        '${AUTHSALT}');
                define( 'SECURE_AUTH_SALT', '${SECUREAUTHSALT}');
                define( 'LOGGED_IN_SALT',   '${LOGGEDINSALT}');
                define( 'NONCE_SALT',       '${NONCESALT}');
                /**#@-*/
                /**
                * WordPress Database Table prefix.
                *
                * You can have multiple installations in one database if you give each
                * a unique prefix. Only numbers, letters, and underscores please!
                */
                $table_prefix = '${TableP}';
                /**
                * For developers: WordPress debugging mode.
                *
                * Change this to true to enable the display of notices during development.
                * It is strongly recommended that plugin and theme developers use WP_DEBUG
                * in their development environments.
                *
                * For information on other constants that can be used for debugging,
                * visit the Codex.
                *
                * @link https://codex.wordpress.org/Debugging_in_WordPress
                */
                define( 'WP_DEBUG', false );
                /* That's all, stop editing! Happy blogging. */
                /** Absolute path to the WordPress directory. */
                if ( ! defined( 'ABSPATH' ) ) {
                  define( 'ABSPATH', dirname( __FILE__ ) . '/' );
                }
                /** Sets up WordPress vars and included files. */
                require_once( ABSPATH . 'wp-settings.php' );
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.APS01.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -s ${AWS::StackId} -r APS01 --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties: 
      ImageId: 'ami-00f9d04b3b3092052'
      InstanceType: t2.micro
      SubnetId: !Ref FOB01
      AvailabilityZone: 'ap-northeast-1a'
      KeyName: !Ref KeyName
      SecurityGroupIds: 
      - !GetAtt APSecurityGroup.GroupId
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource APS01 --region ${AWS::Region}
          /opt/aws/bin/cfn-hup || error_exit ''Failed to start cfn-hup''
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource APS01 --region ${AWS::Region}

#RDSZ
  RDSBDmysql:
    Type: AWS::RDS::DBInstance
    Properties:
      AvailabilityZone: 'ap-northeast-1a'
      DBSubnetGroupName: !Ref RDSSNG
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      Engine: 'MySQL'
      DBName: !Ref DBName
      MasterUsername: !Ref DBMasterUserName
      MasterUserPassword: !Ref DBMasterPassword
      VPCSecurityGroups: 
      - !GetAtt RDSSG008.GroupId
    DeletionPolicy: "Delete"
    DependsOn: RDSSNG


#-----------VPC--VPC--VPC--VPC-----------
# Create VPC
  CFVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'vpc' ] ]

# Create Public RouteTable
  CFPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicRouteTable' ] ]

# Create Private RouteTable
  CFPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CFVPC
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateRouteTable' ] ]

# Create Public Subnet A
  FOB01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 'ap-northeast-1a'
      # public
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicSubnetA' ] ]
  PubSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FOB01
      RouteTableId: !Ref CFPublicRouteTable

# Create Public Subnet C
  FOB02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PublicSubnetC' ] ]
  PubSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FOB02
      RouteTableId: !Ref CFPublicRouteTable

# Create Private Subnet A
  CP01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateSubnetA' ] ]
  PriSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CP01
      RouteTableId: !Ref CFPrivateRouteTable



# Create Private Subnet C
  CP02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CFVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'PrivateSubnetC' ] ]
  PriSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CP02
      RouteTableId: !Ref CFPrivateRouteTable


# Create InternetGateway
  SEABEE00GW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ '-', [ 'Ref':'ProjectId' ,'IGW' ] ]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CFVPC
      InternetGatewayId: !Ref SEABEE00GW
  VPCRoute:
    Type: AWS::EC2::Route
    DependsOn: SEABEE00GW
    Properties:
      RouteTableId: !Ref CFPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SEABEE00GW
#終わり-----------VPC--VPC--VPC--VPC-----------終わり

#ELB
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        -  !Ref FOB01
        -  !Ref FOB02
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ELBSG

  TargetGroup: 
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties: 
        VpcId:
          Ref: CFVPC
        Protocol: HTTP
        Port: 80
        Matcher: 
          HttpCode: 200
        Targets: 
          - Id: !Ref APS01
            Port: 80

#ELBSG
  ELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: 'ELB Security Group'
      VpcId:
        Ref: CFVPC
      GroupDescription: "-"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  ELB2L: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP


#DBSUB
  RDSSNG: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "TEST"
      SubnetIds: 
        -  !Ref CP01
        -  !Ref CP02



#セキュリティG系
  APSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'AP Security Group'
      VpcId:
        Ref: CFVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: !Ref SSHtoIP
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
#----------------------------------

#RDSSG
  RDSSG008: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'RDS Security Group'
      VpcId:
        Ref: CFVPC    
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref APSecurityGroup
    DependsOn: APSecurityGroup



#Outputは後で弄る
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref CFVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  FOB01SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref FOB01
    Export:
      Name: !Sub '${AWS::StackName}-FOB01SPS'

  FOB02SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref FOB02
    Export:
      Name: !Sub '${AWS::StackName}-FOB02SPS'

  CP01SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref CP01
    Export:
      Name: !Sub '${AWS::StackName}-CP01SPS'

  CP02SPS:
    Description: The ID of the VPC Subnet
    Value: !Ref CP02
    Export:
      Name: !Sub '${AWS::StackName}-CP02SPS'